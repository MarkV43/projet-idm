/*
 * generated by Xtext 2.29.0
 */
package fr.n7.petriNet.txt.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import fr.n7.petriNet.txt.ide.contentassist.antlr.internal.InternalNETParser;
import fr.n7.petriNet.txt.services.NETGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class NETParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(NETGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, NETGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getElementAccess().getAlternatives(), "rule__Element__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getArcAccess().getAlternatives(), "rule__Arc__Alternatives");
			builder.put(grammarAccess.getNetworkAccess().getGroup(), "rule__Network__Group__0");
			builder.put(grammarAccess.getPlaceAccess().getGroup(), "rule__Place__Group__0");
			builder.put(grammarAccess.getPlaceAccess().getGroup_2(), "rule__Place__Group_2__0");
			builder.put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
			builder.put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
			builder.put(grammarAccess.getArcAccess().getGroup_0(), "rule__Arc__Group_0__0");
			builder.put(grammarAccess.getArc_ImplAccess().getGroup(), "rule__Arc_Impl__Group__0");
			builder.put(grammarAccess.getArc_ImplAccess().getGroup_2(), "rule__Arc_Impl__Group_2__0");
			builder.put(grammarAccess.getReadArcAccess().getGroup(), "rule__ReadArc__Group__0");
			builder.put(grammarAccess.getNetworkAccess().getNameAssignment_2(), "rule__Network__NameAssignment_2");
			builder.put(grammarAccess.getNetworkAccess().getElementsAssignment_3(), "rule__Network__ElementsAssignment_3");
			builder.put(grammarAccess.getNetworkAccess().getArcsAssignment_4(), "rule__Network__ArcsAssignment_4");
			builder.put(grammarAccess.getPlaceAccess().getNameAssignment_1(), "rule__Place__NameAssignment_1");
			builder.put(grammarAccess.getPlaceAccess().getTokensAssignment_2_1(), "rule__Place__TokensAssignment_2_1");
			builder.put(grammarAccess.getTransitionAccess().getNameAssignment_2(), "rule__Transition__NameAssignment_2");
			builder.put(grammarAccess.getArc_ImplAccess().getPredecessorAssignment_0(), "rule__Arc_Impl__PredecessorAssignment_0");
			builder.put(grammarAccess.getArc_ImplAccess().getWeightAssignment_2_0(), "rule__Arc_Impl__WeightAssignment_2_0");
			builder.put(grammarAccess.getArc_ImplAccess().getSuccessorAssignment_4(), "rule__Arc_Impl__SuccessorAssignment_4");
			builder.put(grammarAccess.getReadArcAccess().getPredecessorAssignment_0(), "rule__ReadArc__PredecessorAssignment_0");
			builder.put(grammarAccess.getReadArcAccess().getWeightAssignment_2(), "rule__ReadArc__WeightAssignment_2");
			builder.put(grammarAccess.getReadArcAccess().getSuccessorAssignment_4(), "rule__ReadArc__SuccessorAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private NETGrammarAccess grammarAccess;

	@Override
	protected InternalNETParser createParser() {
		InternalNETParser result = new InternalNETParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public NETGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(NETGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
