/*
 * generated by Xtext 2.29.0
 */
package fr.n7.petriNet.txt.serializer;

import com.google.inject.Inject;
import fr.n7.petriNet.txt.services.NETGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import petrinet.Arc;
import petrinet.Network;
import petrinet.PetrinetPackage;
import petrinet.Place;
import petrinet.ReadArc;
import petrinet.Transition;

@SuppressWarnings("all")
public class NETSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private NETGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PetrinetPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PetrinetPackage.ARC:
				sequence_Arc_Impl(context, (Arc) semanticObject); 
				return; 
			case PetrinetPackage.NETWORK:
				sequence_Network(context, (Network) semanticObject); 
				return; 
			case PetrinetPackage.PLACE:
				sequence_Place(context, (Place) semanticObject); 
				return; 
			case PetrinetPackage.READ_ARC:
				sequence_ReadArc(context, (ReadArc) semanticObject); 
				return; 
			case PetrinetPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Arc returns Arc
	 *     Arc_Impl returns Arc
	 *
	 * Constraint:
	 *     (predecessor=[Element|EString] weight=EInt? successor=[Element|EString])
	 * </pre>
	 */
	protected void sequence_Arc_Impl(ISerializationContext context, Arc semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Network returns Network
	 *
	 * Constraint:
	 *     (name=EString elements+=Element+ arcs+=Arc+)
	 * </pre>
	 */
	protected void sequence_Network(ISerializationContext context, Network semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Place
	 *     Place returns Place
	 *
	 * Constraint:
	 *     (name=EString tokens=EInt?)
	 * </pre>
	 */
	protected void sequence_Place(ISerializationContext context, Place semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Arc returns ReadArc
	 *     ReadArc returns ReadArc
	 *
	 * Constraint:
	 *     (predecessor=[Element|EString] weight=EInt? successor=[Element|EString])
	 * </pre>
	 */
	protected void sequence_ReadArc(ISerializationContext context, ReadArc semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Transition
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PetrinetPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PetrinetPackage.Literals.ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransitionAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
}
