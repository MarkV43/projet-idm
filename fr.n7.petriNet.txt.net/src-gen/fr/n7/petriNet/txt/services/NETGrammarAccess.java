/*
 * generated by Xtext 2.29.0
 */
package fr.n7.petriNet.txt.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class NETGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class NetworkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.petriNet.txt.NET.Network");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNetworkAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cNetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Assignment cArcsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cArcsArcParserRuleCall_4_0 = (RuleCall)cArcsAssignment_4.eContents().get(0);
		
		//Network returns Network:
		//    {Network}
		//    'net' name=EString
		//    ( elements += Element )+
		//    ( arcs += Arc )+;
		@Override public ParserRule getRule() { return rule; }
		
		//{Network}
		//'net' name=EString
		//( elements += Element )+
		//( arcs += Arc )+
		public Group getGroup() { return cGroup; }
		
		//{Network}
		public Action getNetworkAction_0() { return cNetworkAction_0; }
		
		//'net'
		public Keyword getNetKeyword_1() { return cNetKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//( elements += Element )+
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Element
		public RuleCall getElementsElementParserRuleCall_3_0() { return cElementsElementParserRuleCall_3_0; }
		
		//( arcs += Arc )+
		public Assignment getArcsAssignment_4() { return cArcsAssignment_4; }
		
		//Arc
		public RuleCall getArcsArcParserRuleCall_4_0() { return cArcsArcParserRuleCall_4_0; }
	}
	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.petriNet.txt.NET.Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPlaceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTransitionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Element returns Element:
		//    Place | Transition;
		@Override public ParserRule getRule() { return rule; }
		
		//Place | Transition
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Place
		public RuleCall getPlaceParserRuleCall_0() { return cPlaceParserRuleCall_0; }
		
		//Transition
		public RuleCall getTransitionParserRuleCall_1() { return cTransitionParserRuleCall_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.petriNet.txt.NET.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class PlaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.petriNet.txt.NET.Place");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTokensAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTokensEIntParserRuleCall_2_1_0 = (RuleCall)cTokensAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Place returns Place:
		//    "pl"
		//    name=EString
		//    ('(' tokens=EInt ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//"pl"
		//name=EString
		//('(' tokens=EInt ')')?
		public Group getGroup() { return cGroup; }
		
		//"pl"
		public Keyword getPlKeyword_0() { return cPlKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//('(' tokens=EInt ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//tokens=EInt
		public Assignment getTokensAssignment_2_1() { return cTokensAssignment_2_1; }
		
		//EInt
		public RuleCall getTokensEIntParserRuleCall_2_1_0() { return cTokensEIntParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.petriNet.txt.NET.Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		////        ('incoming' '(' incoming+=[Arc|EString] ( "," incoming+=[Arc|EString])* ')' )?
		////        ('outgoing' '(' outgoing+=[Arc|EString] ( "," outgoing+=[Arc|EString])* ')' )?
		//Transition returns Transition:
		//    {Transition}
		//    "tr"
		//    name=EString ;
		@Override public ParserRule getRule() { return rule; }
		
		//{Transition}
		//"tr"
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{Transition}
		public Action getTransitionAction_0() { return cTransitionAction_0; }
		
		//"tr"
		public Keyword getTrKeyword_1() { return cTrKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.petriNet.txt.NET.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class ArcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.petriNet.txt.NET.Arc");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cArcKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cArc_ImplParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cReadArcParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Arc returns Arc:
		//    'arc' Arc_Impl | ReadArc;
		@Override public ParserRule getRule() { return rule; }
		
		//'arc' Arc_Impl | ReadArc
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'arc' Arc_Impl
		public Group getGroup_0() { return cGroup_0; }
		
		//'arc'
		public Keyword getArcKeyword_0_0() { return cArcKeyword_0_0; }
		
		//Arc_Impl
		public RuleCall getArc_ImplParserRuleCall_0_1() { return cArc_ImplParserRuleCall_0_1; }
		
		//ReadArc
		public RuleCall getReadArcParserRuleCall_1() { return cReadArcParserRuleCall_1; }
	}
	public class Arc_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.petriNet.txt.NET.Arc_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredecessorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPredecessorElementCrossReference_0_0 = (CrossReference)cPredecessorAssignment_0.eContents().get(0);
		private final RuleCall cPredecessorElementEStringParserRuleCall_0_0_1 = (RuleCall)cPredecessorElementCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cWeightAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cWeightEIntParserRuleCall_2_0_0 = (RuleCall)cWeightAssignment_2_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSuccessorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSuccessorElementCrossReference_4_0 = (CrossReference)cSuccessorAssignment_4.eContents().get(0);
		private final RuleCall cSuccessorElementEStringParserRuleCall_4_0_1 = (RuleCall)cSuccessorElementCrossReference_4_0.eContents().get(1);
		
		//Arc_Impl returns Arc:
		//    predecessor=[Element|EString]
		//    "-" (weight=EInt "-")? ">"
		//    successor=[Element|EString]
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//predecessor=[Element|EString]
		//"-" (weight=EInt "-")? ">"
		//successor=[Element|EString]
		public Group getGroup() { return cGroup; }
		
		//predecessor=[Element|EString]
		public Assignment getPredecessorAssignment_0() { return cPredecessorAssignment_0; }
		
		//[Element|EString]
		public CrossReference getPredecessorElementCrossReference_0_0() { return cPredecessorElementCrossReference_0_0; }
		
		//EString
		public RuleCall getPredecessorElementEStringParserRuleCall_0_0_1() { return cPredecessorElementEStringParserRuleCall_0_0_1; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//(weight=EInt "-")?
		public Group getGroup_2() { return cGroup_2; }
		
		//weight=EInt
		public Assignment getWeightAssignment_2_0() { return cWeightAssignment_2_0; }
		
		//EInt
		public RuleCall getWeightEIntParserRuleCall_2_0_0() { return cWeightEIntParserRuleCall_2_0_0; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_2_1() { return cHyphenMinusKeyword_2_1; }
		
		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
		
		//successor=[Element|EString]
		public Assignment getSuccessorAssignment_4() { return cSuccessorAssignment_4; }
		
		//[Element|EString]
		public CrossReference getSuccessorElementCrossReference_4_0() { return cSuccessorElementCrossReference_4_0; }
		
		//EString
		public RuleCall getSuccessorElementEStringParserRuleCall_4_0_1() { return cSuccessorElementEStringParserRuleCall_4_0_1; }
	}
	public class ReadArcElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.petriNet.txt.NET.ReadArc");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPredecessorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cPredecessorElementCrossReference_0_0 = (CrossReference)cPredecessorAssignment_0.eContents().get(0);
		private final RuleCall cPredecessorElementEStringParserRuleCall_0_0_1 = (RuleCall)cPredecessorElementCrossReference_0_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cWeightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cWeightEIntParserRuleCall_2_0 = (RuleCall)cWeightAssignment_2.eContents().get(0);
		private final Keyword cQuestionMarkGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSuccessorAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSuccessorElementCrossReference_4_0 = (CrossReference)cSuccessorAssignment_4.eContents().get(0);
		private final RuleCall cSuccessorElementEStringParserRuleCall_4_0_1 = (RuleCall)cSuccessorElementCrossReference_4_0.eContents().get(1);
		
		//ReadArc returns ReadArc:
		//    predecessor=[Element|EString]
		//    "-" (weight=EInt)? "?>"
		//    successor=[Element|EString]
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//predecessor=[Element|EString]
		//"-" (weight=EInt)? "?>"
		//successor=[Element|EString]
		public Group getGroup() { return cGroup; }
		
		//predecessor=[Element|EString]
		public Assignment getPredecessorAssignment_0() { return cPredecessorAssignment_0; }
		
		//[Element|EString]
		public CrossReference getPredecessorElementCrossReference_0_0() { return cPredecessorElementCrossReference_0_0; }
		
		//EString
		public RuleCall getPredecessorElementEStringParserRuleCall_0_0_1() { return cPredecessorElementEStringParserRuleCall_0_0_1; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//(weight=EInt)?
		public Assignment getWeightAssignment_2() { return cWeightAssignment_2; }
		
		//EInt
		public RuleCall getWeightEIntParserRuleCall_2_0() { return cWeightEIntParserRuleCall_2_0; }
		
		//"?>"
		public Keyword getQuestionMarkGreaterThanSignKeyword_3() { return cQuestionMarkGreaterThanSignKeyword_3; }
		
		//successor=[Element|EString]
		public Assignment getSuccessorAssignment_4() { return cSuccessorAssignment_4; }
		
		//[Element|EString]
		public CrossReference getSuccessorElementCrossReference_4_0() { return cSuccessorElementCrossReference_4_0; }
		
		//EString
		public RuleCall getSuccessorElementEStringParserRuleCall_4_0_1() { return cSuccessorElementEStringParserRuleCall_4_0_1; }
	}
	
	
	private final NetworkElements pNetwork;
	private final ElementElements pElement;
	private final EStringElements pEString;
	private final PlaceElements pPlace;
	private final TransitionElements pTransition;
	private final EIntElements pEInt;
	private final ArcElements pArc;
	private final Arc_ImplElements pArc_Impl;
	private final ReadArcElements pReadArc;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public NETGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pNetwork = new NetworkElements();
		this.pElement = new ElementElements();
		this.pEString = new EStringElements();
		this.pPlace = new PlaceElements();
		this.pTransition = new TransitionElements();
		this.pEInt = new EIntElements();
		this.pArc = new ArcElements();
		this.pArc_Impl = new Arc_ImplElements();
		this.pReadArc = new ReadArcElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.n7.petriNet.txt.NET".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Network returns Network:
	//    {Network}
	//    'net' name=EString
	//    ( elements += Element )+
	//    ( arcs += Arc )+;
	public NetworkElements getNetworkAccess() {
		return pNetwork;
	}
	
	public ParserRule getNetworkRule() {
		return getNetworkAccess().getRule();
	}
	
	//Element returns Element:
	//    Place | Transition;
	public ElementElements getElementAccess() {
		return pElement;
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Place returns Place:
	//    "pl"
	//    name=EString
	//    ('(' tokens=EInt ')')?;
	public PlaceElements getPlaceAccess() {
		return pPlace;
	}
	
	public ParserRule getPlaceRule() {
		return getPlaceAccess().getRule();
	}
	
	////        ('incoming' '(' incoming+=[Arc|EString] ( "," incoming+=[Arc|EString])* ')' )?
	////        ('outgoing' '(' outgoing+=[Arc|EString] ( "," outgoing+=[Arc|EString])* ')' )?
	//Transition returns Transition:
	//    {Transition}
	//    "tr"
	//    name=EString ;
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//Arc returns Arc:
	//    'arc' Arc_Impl | ReadArc;
	public ArcElements getArcAccess() {
		return pArc;
	}
	
	public ParserRule getArcRule() {
		return getArcAccess().getRule();
	}
	
	//Arc_Impl returns Arc:
	//    predecessor=[Element|EString]
	//    "-" (weight=EInt "-")? ">"
	//    successor=[Element|EString]
	//    ;
	public Arc_ImplElements getArc_ImplAccess() {
		return pArc_Impl;
	}
	
	public ParserRule getArc_ImplRule() {
		return getArc_ImplAccess().getRule();
	}
	
	//ReadArc returns ReadArc:
	//    predecessor=[Element|EString]
	//    "-" (weight=EInt)? "?>"
	//    successor=[Element|EString]
	//    ;
	public ReadArcElements getReadArcAccess() {
		return pReadArc;
	}
	
	public ParserRule getReadArcRule() {
		return getReadArcAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
