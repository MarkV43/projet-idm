/*
 * generated by Xtext 2.29.0
 */
grammar InternalNET;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.n7.petriNet.txt.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.n7.petriNet.txt.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.n7.petriNet.txt.services.NETGrammarAccess;

}

@parser::members {

 	private NETGrammarAccess grammarAccess;

    public InternalNETParser(TokenStream input, NETGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Network";
   	}

   	@Override
   	protected NETGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleNetwork
entryRuleNetwork returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNetworkRule()); }
	iv_ruleNetwork=ruleNetwork
	{ $current=$iv_ruleNetwork.current; }
	EOF;

// Rule Network
ruleNetwork returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNetworkAccess().getNetworkAction_0(),
					$current);
			}
		)
		otherlv_1='net'
		{
			newLeafNode(otherlv_1, grammarAccess.getNetworkAccess().getNetKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getNetworkAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNetworkRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.n7.petriNet.txt.NET.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNetworkAccess().getElementsElementParserRuleCall_3_0());
				}
				lv_elements_3_0=ruleElement
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNetworkRule());
					}
					add(
						$current,
						"elements",
						lv_elements_3_0,
						"fr.n7.petriNet.txt.NET.Element");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getNetworkAccess().getArcsArcParserRuleCall_4_0());
				}
				lv_arcs_4_0=ruleArc
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNetworkRule());
					}
					add(
						$current,
						"arcs",
						lv_arcs_4_0,
						"fr.n7.petriNet.txt.NET.Arc");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getPlaceParserRuleCall_0());
		}
		this_Place_0=rulePlace
		{
			$current = $this_Place_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getTransitionParserRuleCall_1());
		}
		this_Transition_1=ruleTransition
		{
			$current = $this_Transition_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRulePlace
entryRulePlace returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPlaceRule()); }
	iv_rulePlace=rulePlace
	{ $current=$iv_rulePlace.current; }
	EOF;

// Rule Place
rulePlace returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='pl'
		{
			newLeafNode(otherlv_0, grammarAccess.getPlaceAccess().getPlKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPlaceAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPlaceRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"fr.n7.petriNet.txt.NET.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getPlaceAccess().getLeftParenthesisKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPlaceAccess().getTokensEIntParserRuleCall_2_1_0());
					}
					lv_tokens_3_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPlaceRule());
						}
						set(
							$current,
							"tokens",
							lv_tokens_3_0,
							"fr.n7.petriNet.txt.NET.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getPlaceAccess().getRightParenthesisKeyword_2_2());
			}
		)?
	)
;

// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	iv_ruleTransition=ruleTransition
	{ $current=$iv_ruleTransition.current; }
	EOF;

// Rule Transition
ruleTransition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTransitionAccess().getTransitionAction_0(),
					$current);
			}
		)
		otherlv_1='tr'
		{
			newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getTrKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTransitionAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTransitionRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"fr.n7.petriNet.txt.NET.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleArc
entryRuleArc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArcRule()); }
	iv_ruleArc=ruleArc
	{ $current=$iv_ruleArc.current; }
	EOF;

// Rule Arc
ruleArc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='arc'
			{
				newLeafNode(otherlv_0, grammarAccess.getArcAccess().getArcKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getArcAccess().getArc_ImplParserRuleCall_0_1());
			}
			this_Arc_Impl_1=ruleArc_Impl
			{
				$current = $this_Arc_Impl_1.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getArcAccess().getReadArcParserRuleCall_1());
		}
		this_ReadArc_2=ruleReadArc
		{
			$current = $this_ReadArc_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleArc_Impl
entryRuleArc_Impl returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getArc_ImplRule()); }
	iv_ruleArc_Impl=ruleArc_Impl
	{ $current=$iv_ruleArc_Impl.current; }
	EOF;

// Rule Arc_Impl
ruleArc_Impl returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArc_ImplRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getArc_ImplAccess().getPredecessorElementCrossReference_0_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getArc_ImplAccess().getHyphenMinusKeyword_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getArc_ImplAccess().getWeightEIntParserRuleCall_2_0_0());
					}
					lv_weight_2_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getArc_ImplRule());
						}
						set(
							$current,
							"weight",
							lv_weight_2_0,
							"fr.n7.petriNet.txt.NET.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_3='-'
			{
				newLeafNode(otherlv_3, grammarAccess.getArc_ImplAccess().getHyphenMinusKeyword_2_1());
			}
		)?
		otherlv_4='>'
		{
			newLeafNode(otherlv_4, grammarAccess.getArc_ImplAccess().getGreaterThanSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getArc_ImplRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getArc_ImplAccess().getSuccessorElementCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleReadArc
entryRuleReadArc returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReadArcRule()); }
	iv_ruleReadArc=ruleReadArc
	{ $current=$iv_ruleReadArc.current; }
	EOF;

// Rule ReadArc
ruleReadArc returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReadArcRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getReadArcAccess().getPredecessorElementCrossReference_0_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='-'
		{
			newLeafNode(otherlv_1, grammarAccess.getReadArcAccess().getHyphenMinusKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReadArcAccess().getWeightEIntParserRuleCall_2_0());
				}
				lv_weight_2_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReadArcRule());
					}
					set(
						$current,
						"weight",
						lv_weight_2_0,
						"fr.n7.petriNet.txt.NET.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3='?>'
		{
			newLeafNode(otherlv_3, grammarAccess.getReadArcAccess().getQuestionMarkGreaterThanSignKeyword_3());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getReadArcRule());
					}
				}
				{
					newCompositeNode(grammarAccess.getReadArcAccess().getSuccessorElementCrossReference_4_0());
				}
				ruleEString
				{
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
