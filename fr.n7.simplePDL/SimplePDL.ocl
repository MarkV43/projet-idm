import 'SimplePDL.ecore'

package simplepdl

context Process
inv warningSeverity: true
inv withMessage('Explicit message in process ' + self.name + ' (withMessage)'): true
-- inv errorSeverity: null

context Process
inv validName('Invalid name: ' + self.name):
	self.name.matches('[A-Za-z_][A-Za-z0-9_]*')

context ProcessElement
def: process(): Process =
	Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first()

context WorkSequence
inv successorAndPredecessorInSameProcess('Activities not in the same process : '
		+ self.predecessor.name + ' in ' + self.predecessor.process().name+ ' and '
		+ self.successor.name + ' in ' + self.successor.process().name
):
	self.process() = self.successor.process()
	and self.process() = self.predecessor.process()
	
context WorkSequence
inv notReflexive('Sequences must not be reflexive: ' + self.predecessor.name + ' --' + self.linkType.toString() + '--> ' + self.successor.name):
	self.predecessor <> self.successor
	
context WorkDefinition
inv uniqueName('The name property is not unique: ' + self.name):
	self.Process.processElements
		->select(e |  e.oclIsKindOf(WorkDefinition))
		->collect(e | e.oclAsType(WorkDefinition))
		->forAll(w | self = w or self.name <> w.name)
		
context WorkDefinition
inv validName('Invalid name: ' + self.name):
	self.name.matches('[A-Za-z_]\\w+')
	
context Resource
inv positiveAmount('The amount must be positive: ' + self.amount.toString()):
	self.amount > 0

context ResourceUtilisation
inv validAmount('Invalid amount: ' + self.amount.toString()):
	self.amount <= self.resource.amount and self.amount > 0
	
context ResourceUtilisation
inv uniqueResourceUtilisation('A WorkDefinition cannot use the same resource more than once: ' + self.work.name + ' --> ' + self.resource.name):
	self.Process.processElements
		->select(e | e.oclIsKindOf(ResourceUtilisation))
		->collect(e | e.oclAsType(ResourceUtilisation))
		->forAll(r | self = r or self.resource <> r.resource or self.work <> r.work)

endpackage