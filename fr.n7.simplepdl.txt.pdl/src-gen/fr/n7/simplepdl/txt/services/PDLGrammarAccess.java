/*
 * generated by Xtext 2.29.0
 */
package fr.n7.simplepdl.txt.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class PDLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProcessElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.Process");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProcessAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cProcessKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProcessElementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProcessElementsProcessElementParserRuleCall_4_0 = (RuleCall)cProcessElementsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Process returns Process:
		//    {Process}
		//    'process'
		//    name=EString
		//    '{'
		//        ( processElements+=ProcessElement )+
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Process}
		//'process'
		//name=EString
		//'{'
		//    ( processElements+=ProcessElement )+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Process}
		public Action getProcessAction_0() { return cProcessAction_0; }
		
		//'process'
		public Keyword getProcessKeyword_1() { return cProcessKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//( processElements+=ProcessElement )+
		public Assignment getProcessElementsAssignment_4() { return cProcessElementsAssignment_4; }
		
		//ProcessElement
		public RuleCall getProcessElementsProcessElementParserRuleCall_4_0() { return cProcessElementsProcessElementParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ProcessElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.ProcessElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cWorkDefinitionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cWorkSequenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGuidanceParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cResourceUtilisationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cResourceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//ProcessElement returns ProcessElement:
		//    WorkDefinition | WorkSequence | Guidance | ResourceUtilisation | Resource;
		@Override public ParserRule getRule() { return rule; }
		
		//WorkDefinition | WorkSequence | Guidance | ResourceUtilisation | Resource
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//WorkDefinition
		public RuleCall getWorkDefinitionParserRuleCall_0() { return cWorkDefinitionParserRuleCall_0; }
		
		//WorkSequence
		public RuleCall getWorkSequenceParserRuleCall_1() { return cWorkSequenceParserRuleCall_1; }
		
		//Guidance
		public RuleCall getGuidanceParserRuleCall_2() { return cGuidanceParserRuleCall_2; }
		
		//ResourceUtilisation
		public RuleCall getResourceUtilisationParserRuleCall_3() { return cResourceUtilisationParserRuleCall_3; }
		
		//Resource
		public RuleCall getResourceParserRuleCall_4() { return cResourceParserRuleCall_4; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class WorkDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.WorkDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWorkDefinitionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWdKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//WorkDefinition returns WorkDefinition:
		//    {WorkDefinition}
		//    'wd'
		//    name=EString ;
		@Override public ParserRule getRule() { return rule; }
		
		//{WorkDefinition}
		//'wd'
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{WorkDefinition}
		public Action getWorkDefinitionAction_0() { return cWorkDefinitionAction_0; }
		
		//'wd'
		public Keyword getWdKeyword_1() { return cWdKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class WorkSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.WorkSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLinkTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLinkTypeWorkSequenceTypeEnumRuleCall_1_0 = (RuleCall)cLinkTypeAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPredecessorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cPredecessorWorkDefinitionCrossReference_3_0 = (CrossReference)cPredecessorAssignment_3.eContents().get(0);
		private final RuleCall cPredecessorWorkDefinitionEStringParserRuleCall_3_0_1 = (RuleCall)cPredecessorWorkDefinitionCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cSuccessorAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cSuccessorWorkDefinitionCrossReference_5_0 = (CrossReference)cSuccessorAssignment_5.eContents().get(0);
		private final RuleCall cSuccessorWorkDefinitionEStringParserRuleCall_5_0_1 = (RuleCall)cSuccessorWorkDefinitionCrossReference_5_0.eContents().get(1);
		
		////    '{'
		////        ('linksToPredecessors' '(' linksToPredecessors+=[WorkSequence|EString] ( "," linksToPredecessors+=[WorkSequence|EString])* ')' )?
		////        ('linksToSuccessors' '(' linksToSuccessors+=[WorkSequence|EString] ( "," linksToSuccessors+=[WorkSequence|EString])* ')' )?
		////        ('resourcesUtilised' '(' resourcesUtilised+=[ResourceUtilisation|EString] ( "," resourcesUtilised+=[ResourceUtilisation|EString])* ')' )?
		////    '}';
		//WorkSequence returns WorkSequence:
		//    'ws'
		//        linkType=WorkSequenceType
		//        'from' predecessor=[WorkDefinition|EString]
		//        'to' successor=[WorkDefinition|EString]
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'ws'
		//    linkType=WorkSequenceType
		//    'from' predecessor=[WorkDefinition|EString]
		//    'to' successor=[WorkDefinition|EString]
		public Group getGroup() { return cGroup; }
		
		//'ws'
		public Keyword getWsKeyword_0() { return cWsKeyword_0; }
		
		//linkType=WorkSequenceType
		public Assignment getLinkTypeAssignment_1() { return cLinkTypeAssignment_1; }
		
		//WorkSequenceType
		public RuleCall getLinkTypeWorkSequenceTypeEnumRuleCall_1_0() { return cLinkTypeWorkSequenceTypeEnumRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//predecessor=[WorkDefinition|EString]
		public Assignment getPredecessorAssignment_3() { return cPredecessorAssignment_3; }
		
		//[WorkDefinition|EString]
		public CrossReference getPredecessorWorkDefinitionCrossReference_3_0() { return cPredecessorWorkDefinitionCrossReference_3_0; }
		
		//EString
		public RuleCall getPredecessorWorkDefinitionEStringParserRuleCall_3_0_1() { return cPredecessorWorkDefinitionEStringParserRuleCall_3_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//successor=[WorkDefinition|EString]
		public Assignment getSuccessorAssignment_5() { return cSuccessorAssignment_5; }
		
		//[WorkDefinition|EString]
		public CrossReference getSuccessorWorkDefinitionCrossReference_5_0() { return cSuccessorWorkDefinitionCrossReference_5_0; }
		
		//EString
		public RuleCall getSuccessorWorkDefinitionEStringParserRuleCall_5_0_1() { return cSuccessorWorkDefinitionEStringParserRuleCall_5_0_1; }
	}
	public class GuidanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.Guidance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGuideKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTextAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTextEStringParserRuleCall_1_0 = (RuleCall)cTextAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cElementsProcessElementCrossReference_3_0 = (CrossReference)cElementsAssignment_3.eContents().get(0);
		private final RuleCall cElementsProcessElementEStringParserRuleCall_3_0_1 = (RuleCall)cElementsProcessElementCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cElementsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cElementsProcessElementCrossReference_4_1_0 = (CrossReference)cElementsAssignment_4_1.eContents().get(0);
		private final RuleCall cElementsProcessElementEStringParserRuleCall_4_1_0_1 = (RuleCall)cElementsProcessElementCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Guidance returns Guidance:
		//    'guide' text=EString
		//    '{'
		//        elements+=[ProcessElement|EString] ( "," elements+=[ProcessElement|EString])*
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'guide' text=EString
		//'{'
		//    elements+=[ProcessElement|EString] ( "," elements+=[ProcessElement|EString])*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'guide'
		public Keyword getGuideKeyword_0() { return cGuideKeyword_0; }
		
		//text=EString
		public Assignment getTextAssignment_1() { return cTextAssignment_1; }
		
		//EString
		public RuleCall getTextEStringParserRuleCall_1_0() { return cTextEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//elements+=[ProcessElement|EString]
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//[ProcessElement|EString]
		public CrossReference getElementsProcessElementCrossReference_3_0() { return cElementsProcessElementCrossReference_3_0; }
		
		//EString
		public RuleCall getElementsProcessElementEStringParserRuleCall_3_0_1() { return cElementsProcessElementEStringParserRuleCall_3_0_1; }
		
		//( "," elements+=[ProcessElement|EString])*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//elements+=[ProcessElement|EString]
		public Assignment getElementsAssignment_4_1() { return cElementsAssignment_4_1; }
		
		//[ProcessElement|EString]
		public CrossReference getElementsProcessElementCrossReference_4_1_0() { return cElementsProcessElementCrossReference_4_1_0; }
		
		//EString
		public RuleCall getElementsProcessElementEStringParserRuleCall_4_1_0_1() { return cElementsProcessElementEStringParserRuleCall_4_1_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ResourceUtilisationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.ResourceUtilisation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMakeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cWorkAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cWorkWorkDefinitionCrossReference_1_0 = (CrossReference)cWorkAssignment_1.eContents().get(0);
		private final RuleCall cWorkWorkDefinitionEStringParserRuleCall_1_0_1 = (RuleCall)cWorkWorkDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cUseKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAmountAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAmountEIntParserRuleCall_3_0 = (RuleCall)cAmountAssignment_3.eContents().get(0);
		private final Keyword cOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cResourceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cResourceResourceCrossReference_5_0 = (CrossReference)cResourceAssignment_5.eContents().get(0);
		private final RuleCall cResourceResourceEStringParserRuleCall_5_0_1 = (RuleCall)cResourceResourceCrossReference_5_0.eContents().get(1);
		
		//ResourceUtilisation returns ResourceUtilisation:
		//    'make'
		//    work=[WorkDefinition|EString]
		//    'use' amount=EInt
		//    'of'
		//    resource=[Resource|EString]
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'make'
		//work=[WorkDefinition|EString]
		//'use' amount=EInt
		//'of'
		//resource=[Resource|EString]
		public Group getGroup() { return cGroup; }
		
		//'make'
		public Keyword getMakeKeyword_0() { return cMakeKeyword_0; }
		
		//work=[WorkDefinition|EString]
		public Assignment getWorkAssignment_1() { return cWorkAssignment_1; }
		
		//[WorkDefinition|EString]
		public CrossReference getWorkWorkDefinitionCrossReference_1_0() { return cWorkWorkDefinitionCrossReference_1_0; }
		
		//EString
		public RuleCall getWorkWorkDefinitionEStringParserRuleCall_1_0_1() { return cWorkWorkDefinitionEStringParserRuleCall_1_0_1; }
		
		//'use'
		public Keyword getUseKeyword_2() { return cUseKeyword_2; }
		
		//amount=EInt
		public Assignment getAmountAssignment_3() { return cAmountAssignment_3; }
		
		//EInt
		public RuleCall getAmountEIntParserRuleCall_3_0() { return cAmountEIntParserRuleCall_3_0; }
		
		//'of'
		public Keyword getOfKeyword_4() { return cOfKeyword_4; }
		
		//resource=[Resource|EString]
		public Assignment getResourceAssignment_5() { return cResourceAssignment_5; }
		
		//[Resource|EString]
		public CrossReference getResourceResourceCrossReference_5_0() { return cResourceResourceCrossReference_5_0; }
		
		//EString
		public RuleCall getResourceResourceEStringParserRuleCall_5_0_1() { return cResourceResourceEStringParserRuleCall_5_0_1; }
	}
	public class ResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.Resource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAmountKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAmountAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAmountEIntParserRuleCall_3_0 = (RuleCall)cAmountAssignment_3.eContents().get(0);
		
		//Resource returns Resource:
		//    'res'
		//    name=EString
		//        'amount' amount=EInt ;
		@Override public ParserRule getRule() { return rule; }
		
		//'res'
		//name=EString
		//    'amount' amount=EInt
		public Group getGroup() { return cGroup; }
		
		//'res'
		public Keyword getResKeyword_0() { return cResKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'amount'
		public Keyword getAmountKeyword_2() { return cAmountKeyword_2; }
		
		//amount=EInt
		public Assignment getAmountAssignment_3() { return cAmountAssignment_3; }
		
		//EInt
		public RuleCall getAmountEIntParserRuleCall_3_0() { return cAmountEIntParserRuleCall_3_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	public class WorkSequenceTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.n7.simplepdl.txt.PDL.WorkSequenceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cStartToStartEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cStartToStartS2sKeyword_0_0 = (Keyword)cStartToStartEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFinishToStartEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFinishToStartF2sKeyword_1_0 = (Keyword)cFinishToStartEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStartToFinishEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStartToFinishS2fKeyword_2_0 = (Keyword)cStartToFinishEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cFinishToFinishEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cFinishToFinishF2fKeyword_3_0 = (Keyword)cFinishToFinishEnumLiteralDeclaration_3.eContents().get(0);
		
		////        ('utilisations' '(' utilisations+=[ResourceUtilisation|EString] ( "," utilisations+=[ResourceUtilisation|EString])* ')' )?
		//enum WorkSequenceType returns WorkSequenceType:
		//                startToStart = 's2s'
		//                | finishToStart = 'f2s'
		//                | startToFinish = 's2f'
		//                | finishToFinish = 'f2f';
		public EnumRule getRule() { return rule; }
		
		//startToStart = 's2s'
		//| finishToStart = 'f2s'
		//| startToFinish = 's2f'
		//| finishToFinish = 'f2f'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//startToStart = 's2s'
		public EnumLiteralDeclaration getStartToStartEnumLiteralDeclaration_0() { return cStartToStartEnumLiteralDeclaration_0; }
		
		//'s2s'
		public Keyword getStartToStartS2sKeyword_0_0() { return cStartToStartS2sKeyword_0_0; }
		
		//finishToStart = 'f2s'
		public EnumLiteralDeclaration getFinishToStartEnumLiteralDeclaration_1() { return cFinishToStartEnumLiteralDeclaration_1; }
		
		//'f2s'
		public Keyword getFinishToStartF2sKeyword_1_0() { return cFinishToStartF2sKeyword_1_0; }
		
		//startToFinish = 's2f'
		public EnumLiteralDeclaration getStartToFinishEnumLiteralDeclaration_2() { return cStartToFinishEnumLiteralDeclaration_2; }
		
		//'s2f'
		public Keyword getStartToFinishS2fKeyword_2_0() { return cStartToFinishS2fKeyword_2_0; }
		
		//finishToFinish = 'f2f'
		public EnumLiteralDeclaration getFinishToFinishEnumLiteralDeclaration_3() { return cFinishToFinishEnumLiteralDeclaration_3; }
		
		//'f2f'
		public Keyword getFinishToFinishF2fKeyword_3_0() { return cFinishToFinishF2fKeyword_3_0; }
	}
	
	private final ProcessElements pProcess;
	private final ProcessElementElements pProcessElement;
	private final EStringElements pEString;
	private final WorkDefinitionElements pWorkDefinition;
	private final WorkSequenceElements pWorkSequence;
	private final GuidanceElements pGuidance;
	private final ResourceUtilisationElements pResourceUtilisation;
	private final ResourceElements pResource;
	private final WorkSequenceTypeElements eWorkSequenceType;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public PDLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProcess = new ProcessElements();
		this.pProcessElement = new ProcessElementElements();
		this.pEString = new EStringElements();
		this.pWorkDefinition = new WorkDefinitionElements();
		this.pWorkSequence = new WorkSequenceElements();
		this.pGuidance = new GuidanceElements();
		this.pResourceUtilisation = new ResourceUtilisationElements();
		this.pResource = new ResourceElements();
		this.eWorkSequenceType = new WorkSequenceTypeElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.n7.simplepdl.txt.PDL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Process returns Process:
	//    {Process}
	//    'process'
	//    name=EString
	//    '{'
	//        ( processElements+=ProcessElement )+
	//    '}';
	public ProcessElements getProcessAccess() {
		return pProcess;
	}
	
	public ParserRule getProcessRule() {
		return getProcessAccess().getRule();
	}
	
	//ProcessElement returns ProcessElement:
	//    WorkDefinition | WorkSequence | Guidance | ResourceUtilisation | Resource;
	public ProcessElementElements getProcessElementAccess() {
		return pProcessElement;
	}
	
	public ParserRule getProcessElementRule() {
		return getProcessElementAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//WorkDefinition returns WorkDefinition:
	//    {WorkDefinition}
	//    'wd'
	//    name=EString ;
	public WorkDefinitionElements getWorkDefinitionAccess() {
		return pWorkDefinition;
	}
	
	public ParserRule getWorkDefinitionRule() {
		return getWorkDefinitionAccess().getRule();
	}
	
	////    '{'
	////        ('linksToPredecessors' '(' linksToPredecessors+=[WorkSequence|EString] ( "," linksToPredecessors+=[WorkSequence|EString])* ')' )?
	////        ('linksToSuccessors' '(' linksToSuccessors+=[WorkSequence|EString] ( "," linksToSuccessors+=[WorkSequence|EString])* ')' )?
	////        ('resourcesUtilised' '(' resourcesUtilised+=[ResourceUtilisation|EString] ( "," resourcesUtilised+=[ResourceUtilisation|EString])* ')' )?
	////    '}';
	//WorkSequence returns WorkSequence:
	//    'ws'
	//        linkType=WorkSequenceType
	//        'from' predecessor=[WorkDefinition|EString]
	//        'to' successor=[WorkDefinition|EString]
	//    ;
	public WorkSequenceElements getWorkSequenceAccess() {
		return pWorkSequence;
	}
	
	public ParserRule getWorkSequenceRule() {
		return getWorkSequenceAccess().getRule();
	}
	
	//Guidance returns Guidance:
	//    'guide' text=EString
	//    '{'
	//        elements+=[ProcessElement|EString] ( "," elements+=[ProcessElement|EString])*
	//    '}';
	public GuidanceElements getGuidanceAccess() {
		return pGuidance;
	}
	
	public ParserRule getGuidanceRule() {
		return getGuidanceAccess().getRule();
	}
	
	//ResourceUtilisation returns ResourceUtilisation:
	//    'make'
	//    work=[WorkDefinition|EString]
	//    'use' amount=EInt
	//    'of'
	//    resource=[Resource|EString]
	//    ;
	public ResourceUtilisationElements getResourceUtilisationAccess() {
		return pResourceUtilisation;
	}
	
	public ParserRule getResourceUtilisationRule() {
		return getResourceUtilisationAccess().getRule();
	}
	
	//Resource returns Resource:
	//    'res'
	//    name=EString
	//        'amount' amount=EInt ;
	public ResourceElements getResourceAccess() {
		return pResource;
	}
	
	public ParserRule getResourceRule() {
		return getResourceAccess().getRule();
	}
	
	////        ('utilisations' '(' utilisations+=[ResourceUtilisation|EString] ( "," utilisations+=[ResourceUtilisation|EString])* ')' )?
	//enum WorkSequenceType returns WorkSequenceType:
	//                startToStart = 's2s'
	//                | finishToStart = 'f2s'
	//                | startToFinish = 's2f'
	//                | finishToFinish = 'f2f';
	public WorkSequenceTypeElements getWorkSequenceTypeAccess() {
		return eWorkSequenceType;
	}
	
	public EnumRule getWorkSequenceTypeRule() {
		return getWorkSequenceTypeAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
